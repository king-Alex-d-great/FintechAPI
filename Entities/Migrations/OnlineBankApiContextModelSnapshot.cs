// <auto-generated />
using System;
using Entities.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(OnlineBankApiContext))]
    partial class OnlineBankApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(38,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountNumber = "0760015555",
                            AccountType = 1,
                            Balance = 20000m,
                            CreatedAt = new DateTime(2021, 10, 3, 6, 34, 6, 248, DateTimeKind.Local).AddTicks(1778),
                            IsActive = true,
                            UpdatedAt = new DateTime(2021, 10, 3, 6, 34, 6, 249, DateTimeKind.Local).AddTicks(5716)
                        },
                        new
                        {
                            Id = 2,
                            AccountNumber = "0222833403",
                            AccountType = 2,
                            Balance = 300000m,
                            CreatedAt = new DateTime(2021, 10, 3, 6, 34, 6, 249, DateTimeKind.Local).AddTicks(8306),
                            IsActive = true,
                            UpdatedAt = new DateTime(2021, 10, 3, 6, 34, 6, 249, DateTimeKind.Local).AddTicks(8313)
                        },
                        new
                        {
                            Id = 3,
                            AccountNumber = "8179265533",
                            AccountType = 1,
                            Balance = 2320000m,
                            CreatedAt = new DateTime(2021, 10, 3, 6, 34, 6, 249, DateTimeKind.Local).AddTicks(8317),
                            IsActive = true,
                            UpdatedAt = new DateTime(2021, 10, 3, 6, 34, 6, 249, DateTimeKind.Local).AddTicks(8318)
                        });
                });

            modelBuilder.Entity("Entities.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            Birthday = new DateTime(1998, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            Birthday = new DateTime(1997, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 3,
                            Birthday = new DateTime(1996, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(38,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionMode")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1000m,
                            CustomerId = 2,
                            IsSuccessful = true,
                            ReceiverAccount = "0760015555",
                            SenderAccount = "0222833403",
                            TimeStamp = new DateTime(2021, 10, 3, 6, 34, 6, 252, DateTimeKind.Local).AddTicks(3659),
                            TransactionMode = 1,
                            TransactionType = 3
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1000m,
                            CustomerId = 1,
                            IsSuccessful = true,
                            ReceiverAccount = "0760015555",
                            SenderAccount = "0760015555",
                            TimeStamp = new DateTime(2021, 10, 3, 6, 34, 6, 252, DateTimeKind.Local).AddTicks(5245),
                            TransactionMode = 2,
                            TransactionType = 1
                        },
                        new
                        {
                            Id = 4,
                            Amount = 11000m,
                            CustomerId = 3,
                            IsSuccessful = true,
                            ReceiverAccount = "0222833403",
                            SenderAccount = "0222833403",
                            TimeStamp = new DateTime(2021, 10, 3, 6, 34, 6, 252, DateTimeKind.Local).AddTicks(5254),
                            TransactionMode = 1,
                            TransactionType = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.Customer", b =>
                {
                    b.HasOne("Entities.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Entities.Models.Transaction", b =>
                {
                    b.HasOne("Entities.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
